---
import type { GetImageResult } from 'astro';
import {Icon} from 'astro-icon/components'

interface Props {
    data: {
        location: string;
        purpose: string;
        time: string;
        area: string;
    }
    titleImages: number[];
    allImages: Promise<GetImageResult>[];
}
const {data, titleImages, allImages} = Astro.props;
const numPreviewImages = titleImages.length - 1;
const headerImage = allImages.filter((_, idx) => titleImages.includes(idx))[0];
if (!headerImage) throw new Error("");
const bubbles = [
    {
        text: data.purpose,
        icon: "mdi:hashtag",
    },
    {
        text: data.location,
        icon: "mdi:location",
    },
    {
        text: data.area,
        icon: "mdi:surface-area",
    },
    {
        text: data.time,
        icon: "mdi:access-time",
    },
]
---

<div id="image-grid">
    <div id="head-image" style={`background-image: url(${(await headerImage).src});`}>
        <div id="overlay">
            <div id="bubbles">
                {bubbles.map(({text, icon}) => <span class="bubble">
                    {icon === undefined ? "" :
                            <Icon name={icon}/>}
                    {text}
                </span>)}
            </div>
        </div>
    </div>
    {
        (await Promise.all(
            allImages.slice(1)
        )).map(
            (data, idx) => ({
                style: `background-image: url(${data.src}); ${titleImages.includes(idx + 1) ? "" : "display: none;"}`,
                idx: idx + 1
            })).map(({style, idx}) =>
                <div style={style} data-idx={idx}></div>
        )
    }
</div>
<div id="image-grid-overlay">
    <div id="close">X</div>
    <div id="prev">&lt;</div>
    <div id="next">&gt;</div>
    <div id="image-grid-overlay-image-container">
        <img src="" alt="Bild (Vollbild)">
    </div>
</div>

<script>
    function isDiv(element: Element | null): element is HTMLDivElement {
        return element instanceof HTMLDivElement;
    }

    function getButton(parent: HTMLElement, selector: string) {
        const button = parent.querySelector(selector);
        // TODO should buttons be.... buttons?
        if (!isDiv(button)) throw Error("implementation error: button is not a div");
        return button;
    }

    function setImage(overlay: HTMLDivElement, imageDivs: HTMLDivElement[], index: number) {
        overlay.style.visibility = "visible";
        overlay.style.opacity = "1";
        const srcStyle = imageDivs[index]?.style.backgroundImage;
        if (!srcStyle) throw Error("could not determine image url");
        const image = overlay.querySelector("img");
        if (!(image instanceof HTMLImageElement)) throw Error("implementation error: image element not found")
        image.src = srcStyle.substring(5, srcStyle.length - 2);
        getButton(overlay, "#prev").style.visibility = index === 0 ? "hidden" : "visible";
        getButton(overlay, "#next").style.visibility = index === imageDivs.length - 1 ? "hidden" : "visible";
    }

    document.querySelectorAll("#image-grid").forEach(grid => {
        const imageDivs = [...grid.children].filter(isDiv);
        const myOverlay = grid.nextElementSibling;
        if (!isDiv(myOverlay)) throw Error("implementation error: overlay is not a div");
        let currentIndex = 0;
        const keyListener = (event: KeyboardEvent) => {
            if (event.key === "Escape") getButton(myOverlay, "#close").click();
            if (event.key === "ArrowLeft") getButton(myOverlay, "#prev").click();
            if (event.key === "ArrowRight") getButton(myOverlay, "#next").click();
            };
        imageDivs.forEach((div, index) => {
            div.addEventListener("click", () => {
                const idxAttr = index ? div.getAttribute("data-idx") : "0";
                if (!idxAttr) throw new Error("failed to get data-idx");
                currentIndex = Number.parseInt(idxAttr);
                setImage(myOverlay, imageDivs, currentIndex);
                // not using capture=once since the user may not ever press a key
                // (i.e. close button instead of escape key)
                document.addEventListener("keydown", keyListener);
            })
        });
        getButton(myOverlay, "#close").addEventListener("click", () => {
            myOverlay.style.visibility = "hidden";
            myOverlay.style.opacity = "0";
            document.removeEventListener("keydown", keyListener);
        });
        getButton(myOverlay, "#prev").addEventListener("click", () => {
            currentIndex = Math.max(0, currentIndex - 1);
            setImage(myOverlay, imageDivs, currentIndex);
            });
        getButton(myOverlay, "#next").addEventListener("click", () => {
            currentIndex = Math.min(imageDivs.length - 1, currentIndex + 1);
            setImage(myOverlay, imageDivs, currentIndex);
            });
    })
</script>

<style define:vars={{numPreviewImages}}>
    #image-grid {
        display: grid;
        grid-template-rows: 1.5fr 1fr;
        grid-template-columns: repeat(var(--numPreviewImages), 1fr);
        aspect-ratio: 5 / 3;
        overflow: hidden;
        gap: 10px;
        padding: 25px 0 30px;;
    }

    #head-image {
        grid-column: 1 / -1;
        position: relative;
    }

    #head-image:before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 20px;
        background: linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.85) 100%);
    }

    #image-grid > div {
        background-size: cover;
        background-position: center;
        border-radius: 20px;
        cursor: pointer;
        transition: filter 0.1s ease-in-out;
    }

    #image-grid > div:hover {
        filter: brightness(0.8);
    }

    #overlay {
        position: absolute;
        left: 0;
        bottom: 0;
        padding: 10px;
    }

    #bubbles {
        display: flex;
        flex-direction: row;
        gap: 10px;
        flex-wrap: wrap;
    }

    .bubble {
        color: black;
        background: white;
        display: flex;
        padding: 5px 15px;
        border-radius: 50px;
        align-items: center;
        gap: 5px;
        font-weight: 600;
    }

    .bubble > img {
        height: 16px;
    }

    #image-grid-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
        visibility: hidden;
        opacity: 0;
        transition: opacity .25s ease-in-out, visibility 0s;
    }

    #image-grid-overlay > #image-grid-overlay-image-container {
        position: absolute;
        width: 90%;
        left: 5%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: none;
    }

    #image-grid-overlay > #image-grid-overlay-image-container > img {
        border-radius: 20px;
        overflow: hidden;
    }

    #image-grid-overlay:hover {
        transition: opacity .25s ease-in-out, visibility 0s 0.25s;
    }

    #image-grid-overlay > :is(#close, #prev, #next) {
        position: absolute;
        /* TODO use proper icons */
        font-size: 40px;
        font-weight: bold;
        user-select: none;
        cursor: pointer;
        color: white;
    }

    #image-grid-overlay > :is(#close, #next) {
        right: 25px;
    }

    #image-grid-overlay > #prev {
        left: 25px;
    }

    #image-grid-overlay > :is(#prev, #next) {
        top: 50%;
        transform: translateY(-50%);
    }
    #next, #prev{
        width: 50px;
        height: 50px;
        display: flex;
        justify-content: center;
        background: #222;
        z-index: 10;
        border-radius: 50%;
    }
    @media (max-width: 768px){
        #image-grid{
            grid-template-rows: 350px 150px;
            grid-template-columns: repeat(var(--numPreviewImages), 1fr);
            aspect-ratio: auto;
        }
        .bubble{
            font-size: 12px;
        }
        #image-grid-overlay > :is(#prev, #next){
            width: 35px;
            height: 35px;
            font-size: 28px;
            line-height: 35px;
            background: #353535;
        }
    }
    @media (max-width: 600px){
        #image-grid{
            grid-template-rows: 350px 150px;
            grid-template-columns: repeat(2, 1fr);
            padding: 25px 0 5px;
        }
    }
</style>