---
import Layout from '../layouts/no_teaser.astro';
import ImageGrid from "../components/ImageGrid.astro";
import {Icon} from 'astro-icon/components';
import { getImage } from 'astro:assets';

const allFiles = import.meta.glob<{default: ImageMetadata}>("../assets/referenzen/*/*.{json,png,jpg}");
const refs = new Map<string, any>;
for (const [path, getter] of Object.entries(allFiles)) {
    const refMatch = /^.*\/(.*?)\/[^/]*$/.exec(path);
    if (!refMatch || !refMatch[1]) throw new Error("error extracting reference name")
    const refName = refMatch[1];
    if (!refs.has(refName))
        refs.set(refName, {
            data: undefined,
            titleImages: [],
            allImages: [],
        })
    const inst = refs.get(refName);
    if (path.endsWith(".json"))
        inst.data = await getter()
    else {
        inst.allImages.push(getImage({src: getter(), format: "webp"}));
        if (/titel.[a-zA-Z]+$/.exec(path))
            inst.titleImages.push(inst.allImages.length - 1)
    }
}
const cards = Array.from(refs.values());
---

<Layout
    title="Referenzen. Inspirationen. Anregungen." 
    description="Entdecken Sie unsere erfolgreichen Bauprojekte! Lassen Sie sich von unseren Referenzen inspirieren und sehen Sie, was wir für Sie tun können."
    >
    <div class="card-section dark" id="gallery">
        <div class="container">
            <h1>Referenzen<span>.</span></h1>
            <span class="reference-toggle" data-purpose="Büro">
                <Icon name="mdi:hashtag"/>
                Büro
            </span>
            <span class="reference-toggle deselected" data-purpose="Wohnung">
                <Icon name="mdi:hashtag"/>
                Wohnung
            </span>
            <span id="sort-by-area">
                <Icon name="mdi:surface-area" />
                <span>Fläche: unsortiert</span>
                <Icon name="mdi:triangle" class="hidden" />
                <Icon name="mdi:triangle" class="hidden" style="transform: rotate(180deg)"/>
            </span>
            <span id="sort-by-time">
                <Icon name="mdi:access-time" />
                <span>Zeit: unsortiert</span>
                <Icon name="mdi:triangle" class="hidden" />
                <Icon name="mdi:triangle" class="hidden" style="transform: rotate(180deg)"/>
            </span>
        </div>
        {cards.map(data =>
                <div class="container" data-purpose={data.data.purpose} data-area={data.data.area} data-time={data.data.time}>
                    <ImageGrid
                            titleImages={data.titleImages}
                            allImages={data.allImages}
                            data={data.data}
                    />
                </div>
        )}
    </div>
</Layout>

<script>
    document.querySelectorAll("#gallery > .container > .reference-toggle").forEach(element =>
        element.addEventListener("click", () => {
            element.toggleAttribute("deselected");
            // if this was the last active filter, reenable all others
            if (!document.querySelector("#gallery > .container > .reference-toggle:not([deselected])"))
                [...document.querySelectorAll<HTMLElement>(
                    "#gallery > .container > .reference-toggle"
                )].filter(
                    other => other !== element
                ).forEach(other => other.click());
            const purpose = element.getAttribute("data-purpose");
            if (!purpose) return;
            [...document.querySelectorAll("#gallery > .container")].filter(
                container => container.getAttribute("data-purpose") === purpose
            ).forEach(container => container.toggleAttribute("hidden"));
        })
    );
    const sortByAreaSpan = document.querySelector<HTMLSpanElement>("#gallery > .container > #sort-by-area");
    const sortByTimeSpan = document.querySelector<HTMLSpanElement>("#gallery > .container > #sort-by-time");
    // null -> true -> false -> true -> false -> ...
    let sortByArea: boolean | null = null;
    let sortByTime: boolean | null = null;
    if (!sortByAreaSpan || !sortByTimeSpan) throw Error("failed to initialize sorting");

    function sortingStateName(state: boolean | null): string {
        if(state === null) return "unsortiert";
        if(state) return "aufsteigend";
        return "absteigend";
    }

    function setHiddenClass(node: Element, show: boolean) {
        if(node.classList.contains("hidden") && show) node.classList.remove("hidden");
        if(!node.classList.contains("hidden") && !show) node.classList.add("hidden");
    }

    function cycleSorting(node: HTMLSpanElement, currentState: boolean | null, targetState: boolean | null): boolean | null {
        const [textSpan, ascIcon, descIcon] = [...node.children].slice(1);
        if(!textSpan || !ascIcon || !descIcon) throw Error("failed to toggle sorting");
        textSpan.textContent = (textSpan.textContent ?? "").replace(sortingStateName(currentState), sortingStateName(targetState));
        setHiddenClass(ascIcon, !!targetState);
        setHiddenClass(descIcon, targetState === false);
        return targetState;
    }

    function performSort(fun: (a: Element, b: Element) => number) {
        const gallery = document.querySelector("#gallery");
        if(!gallery) throw Error("failed to sort");
        gallery.replaceChildren(...[...gallery.children].toSorted((a: Element, b: Element) => {
            // keep menu at the top
            if (!a.hasAttribute("data-purpose")) return -1;
            if (!b.hasAttribute("data-purpose")) return 1;
            return fun(a, b);
        }));
    }

    function getArea(node: Element): number {
        return Number.parseInt(node.getAttribute("data-area")?.replace("m²", "") ?? "")
    }

    function getTime(node: Element): number {
        const raw = node.getAttribute("data-time");
        if(!raw) return NaN;
        for(const [regex, multiplier] of [
            [/^(\d+([.,]\d+)?) Tage?$/, 1],
            [/^(\d+([.,]\d+)?) Wochen?$/, 7],
            [/^(\d+([.,]\d+)?) Monate?$/, 30],
            [/^(\d+([.,]\d+)?) Jahre?$/, 365],
        ] as const) {
            const match = raw.match(regex);
            if (match && match[1]) return multiplier * Number.parseFloat(match[1].replace(",", "."));
        }
        return NaN;
    }

    function buildSorter(fun: (node: Element) => number, direction: boolean) {
        return (a: Element, b: Element) => {
            const areaA = fun(a);
            const areaB = fun(b);
            // unsortables go at the bottom
            if(isNaN(areaA) && isNaN(areaB)) return 0;
            if(isNaN(areaA)) return 1;
            if(isNaN(areaB)) return -1;
            if(areaA === areaB) return 0;
            if(areaA > areaB === direction) return 1;
            return -1;
        };
    }

    sortByAreaSpan.addEventListener("click", () => {
        sortByTime = cycleSorting(sortByTimeSpan, sortByTime, null);
        sortByArea = cycleSorting(sortByAreaSpan, sortByArea, !sortByArea);
        performSort(buildSorter(getArea, !!sortByArea));
    });

    sortByTimeSpan.addEventListener("click", () => {
        sortByArea = cycleSorting(sortByAreaSpan, sortByArea, null);
        sortByTime = cycleSorting(sortByTimeSpan, sortByTime, !sortByTime);
        performSort(buildSorter(getTime, !!sortByTime));
    });

</script>

<style>
    .reference-toggle, #sort-by-area, #sort-by-time {
        background-color: white;
        border-radius: 50px;
        padding: 5px 15px;
        margin: 0 5px;
        color: black;
        cursor: pointer;
        user-select: none;
        display: inline-flex;
        align-items: center;
    }
    .reference-toggle {
        transition: filter 0.1s ease-out;
    }

    .reference-toggle[deselected] {
        filter: brightness(0.5);
    }

    #gallery {
        display: flex;
        flex-direction: column;
        padding: 60px 0;
    }

    .hidden {
        display: none;
    }

    @media (max-width: 768px) {
        .reference-toggle{
                margin: 8px 5px;
            }
    }
</style>
